---
import Layout from "../layouts/Layout.astro";
// import MemberCard from '../components/MemberCard.astro';
import { SITE_TITLE } from "../consts";
import { ctfLogos } from "../config";

// Duplica i loghi per il carosello infinito
const carouselLogos = [...ctfLogos, ...ctfLogos];
---

<Layout title={SITE_TITLE}>
  <div class="hero-fullscreen">
    <div class="container">
      <img src="/logo0.png" alt="CTF Team Logo" class="logo" id="glitch-logo-0" />
      <img src="/logo1.png" alt="CTF Team Logo" class="logo hidden" id="glitch-logo-1" />
      <img src="/arrow.png" alt="CTF Team Logo" class="arrow" />
    </div>
  </div>

  <div class="intro-section" id="start-home-page">
    <div class="container">
      <div class="intro">
        <h1>About Us</h1>
        <p>
          Pwnissa [Pwn + <a href="https://it.wikipedia.org/wiki/Panissa_(gastronomia_ligure)"
            ><b>Panissa</b></a
          >] is the official CTF team of the <b>University of Genoa</b>, founded in 2025 following our
          participation in <b>CyberChallenge.IT</b>.
          <br />
          We are a group of students passionate about cybersecurity, tackling challenges in <b>pwn</b>, <b
            >web</b
          >, <b>crypto</b>, <b>reversing</b>, <b>network</b>, <b>horse racing</b>, and <b>much more</b>.
        </p>
        <p>
          Our goal is to learn while having fun, by taking part in both national and international CTFs. When
          a challenge really grabs our attention, we dive deeper by writing <b>detailed writeups</b> and developing
          <b>custom tools</b> for attack and defense CTFs, which we share publicly.
        </p>
        <p>
          Our mascot, <b>Pwny</b>, is not only the most skilled hacker in the team ‚Äî it also helped us win the <b
            >Best Mascot Award at CyberChallenge.IT 2025</b
          >. üê¥üíª
        </p>

        <div class="location">
          <span>üè´ Universit√† degli Studi di Genova, DIBRIS</span>
          <span>üìç Via Dodecaneso, Genova, Italy</span>
        </div>
      </div>
      <a href="/blog" class="cta-button">Visit our blog</a>
    </div>
  </div>

  <div class="team-section">
    <div class="container">
      <h2>üßë‚Äçüíª Our members</h2>
      <div class="intro">
        <p>
          We are mostly bachelor's and master's students studying Computer Science and Computer Engineering at
          the University of Genoa.
        </p>
      </div>
      <div class="team-note">
        <a href="/members" class="cta-button">See all our members</a>
      </div>
    </div>
  </div>

  <div class="ctf-carousel">
    <div class="container">
      <h2>üèÖ CTFs we played</h2>
      <div class="carousel-container">
        <div class="carousel-track">
          {
            carouselLogos.map((logo, index) => (
              <a href={logo.platform_link} target="_blank" rel="noopener noreferrer">
                <img key={index} src={logo.img_url} alt={logo.name} class="ctf-logo" title={logo.name} />
              </a>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>

  const container = document.querySelector('.carousel-container');
  const track = document.querySelector('.carousel-track');

  // Duplicate content
  track.innerHTML += track.innerHTML;

  let scrollPos = 0;
  const scrollSpeed = 0.5;
  let isDragging = false;
  let startX, startScrollLeft;

  function no_drag() {
    isDragging = false;
    container.classList.remove('dragging');
  }

  container.addEventListener('mouseup', no_drag);
  container.addEventListener('mouseleave', no_drag);
  container.addEventListener('touchend', no_drag);

  // Manual drag
  container.addEventListener('mousedown', (e) => {
    isDragging = true;
    startX = e.pageX;
    startScrollLeft = container.scrollLeft;
    container.classList.add('dragging');
  });
  
  container.addEventListener('mousemove', (e) => {
    if (!isDragging) return;
    e.preventDefault();
    const x = e.pageX;
    const walk = (x - startX) * 1.5;
    container.scrollLeft = startScrollLeft - walk;
  });

  // Touch support
  container.addEventListener('touchstart', (e) => {
    isDragging = true;
    startX = e.touches[0].clientX;
    startScrollLeft = container.scrollLeft;
  }, { passive: false });

  container.addEventListener('touchmove', (e) => {
    if (!isDragging) return;
    e.preventDefault();
    const x = e.touches[0].clientX;
    const walk = (x - startX) * 1.5;
    container.scrollLeft = startScrollLeft - walk;
  }, { passive: false });

  // Auto scroll loop
  function autoScroll() {
    if (!isDragging) {
      scrollPos += scrollSpeed;
      if (scrollPos >= track.scrollWidth / 2) {
        scrollPos = 0;
      }
      container.scrollLeft = scrollPos;
    } else {
      scrollPos = container.scrollLeft; // Sync to user position
    }

    requestAnimationFrame(autoScroll);
  }

  autoScroll(); 

  
</script>

<!-- ciao pianka -->

<script>
  const logo0 = document.getElementById("glitch-logo-0");
  const logo1 = document.getElementById("glitch-logo-1");
  let showingLogo0 = true;

  function toggleGlitch() {
    if (showingLogo0) {
      logo0?.classList.add("hidden");
      logo1?.classList.remove("hidden");
    } else {
      logo1?.classList.add("hidden");
      logo0?.classList.remove("hidden");
    }

    showingLogo0 = !showingLogo0;

    const interval = Math.random() * 500;
    setTimeout(toggleGlitch, interval);
  }

  window.addEventListener("load", () => {
    setTimeout(toggleGlitch, 100);
  });
</script>

<style>
  .hidden {
    display: none;
  }

  .visible {
    display: block;
  }
</style>
